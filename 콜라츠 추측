# Lv1
## 문제 설명  
1937년 Collatz가 제기한 추측에 의하면, 주어진 수가 1이 될 때까지 아래 작업을 반복합니다. 주어진 수가 1이 될 때까지 몇 번의 작업이 필요한지를 구하는 함수 `solution`을 작성해 주세요.  
작업은 아래와 같습니다:  
1. 입력된 수가 짝수라면 2로 나눕니다.  
2. 입력된 수가 홀수라면 3을 곱하고 1을 더합니다.  
반복해서 1이 될 때까지 작업을 진행하며, 이 작업을 몇 번 반복해야 1이 되는지 구합니다.  
- 주어진 수가 1인 경우에는 0을 리턴합니다.  
- 500번의 작업을 해도 1이 되지 않는다면 `-1`을 리턴합니다.  

---

### 제한 조건  
- num은 1 이상 8,000,000 이하의 정수입니다.  

---

## 코드
```java
class Solution {
    public int solution(int num) {
        long number = num; // long으로 자료형 확장
        int count = 0; // 작업 횟수를 저장하는 변수

        // num이 1이 될 때까지 반복
        while (number != 1) {
            if (count >= 500) {
                return -1; // 500번을 초과하면 -1 반환
            }

            // 짝수인 경우
            if (number % 2 == 0) {
                number /= 2;
            } 
            // 홀수인 경우
            else {
                number = number * 3 + 1;
            }

            count++; // 작업 횟수 증가
        }

        return count; // 작업 횟수 반환
    }
}
## 코드 설명
long number = num;: num을 long형으로 변환하여 저장. 이는 큰 숫자까지 처리하기 위함.
int count = 0;: 작업 횟수를 저장할 변수 count를 초기화.
while (number != 1): number가 1이 될 때까지 반복.
if (count >= 500): 500번을 초과하면 -1을 반환.
if (number % 2 == 0): number가 짝수일 경우 2로 나눔.
else: number가 홀수일 경우 3을 곱하고 1을 더함.
count++: 작업을 한 번 진행했으므로 count를 증가시킴.
return count;: 작업 횟수 반환.
