## 문제 설명
배열 arr가 주어집니다. 배열 arr의 각 원소는 숫자 0부터 9까지로 이루어져 있습니다.
이때, 배열 arr에서 연속적으로 나타나는 숫자는 하나만 남기고 전부 제거하려고 합니다.
단, 제거된 후 남은 수들을 반환할 때는 배열 arr의 원소들의 순서를 유지해야 합니다. 
예를 들면,
arr = [1, 1, 3, 3, 0, 1, 1] 이면 [1, 3, 0, 1] 을 return 합니다.
arr = [4, 4, 4, 3, 3] 이면 [4, 3] 을 return 합니다.
배열 arr에서 연속적으로 나타나는 숫자는 제거하고 남은 수들을 return 하는 solution 함수를 완성해 주세요.

## 제한사항
배열 arr의 크기 : 1,000,000 이하의 자연수
배열 arr의 원소의 크기 : 0보다 크거나 같고 9보다 작거나 같은 정수


## 코드 
import java.util.*;

public class Solution {
    public int[] solution(int[] arr) {
        int n = arr.length;
        int[] answer = new int[n]; 
        int index = 0; 
        
        answer[index++] = arr[0]; 

        for (int i = 1; i < n; i++) {
            if (arr[i] != arr[i - 1]) { 
                answer[index++] = arr[i];
            }
        }

        
        return Arrays.copyOf(answer, index);
    }
}

## 코드 설명
이 코드는 연속으로 나타나는 숫자를 제거하고 남은 숫자들을 순서대로 반환하는 solution 메서드를 구현한 것이다.
int n = arr.length;
입력 배열 arr의 길이를 변수 n에 저장한다.
int[] answer = new int[n];
최악의 경우(모든 숫자가 다 다를 때)를 대비해 입력 배열과 같은 크기의 answer 배열을 생성한다.
int index = 0;
유일한 숫자를 저장할 위치를 나타내는 index 변수를 선언한다.
answer[index++] = arr[0];
첫 번째 원소는 비교할 대상이 없으므로 answer 배열에 바로 저장한다.
for (int i = 1; i < n; i++)
두 번째 원소부터 순회하면서 이전 원소와 비교한다.
if (arr[i] != arr[i - 1]) { answer[index++] = arr[i]; }
현재 원소가 이전 원소와 다를 경우에만 answer 배열에 저장한다.
return Arrays.copyOf(answer, index);
answer 배열에는 중복을 제거한 값들이 앞에서부터 채워져 있으므로, index 길이만큼 복사하여 반환한다.

## 주요 문법
Arrays.copyOf(array, newLength)
배열의 길이를 newLength만큼 잘라서 새로운 배열을 반환하는 메서드
. 배열 요소 중복 제거 (연속된 값 비교)
이전 원소(arr[i - 1])와 현재 원소(arr[i])를 비교하여 같은 경우 추가하지 않는 방식
