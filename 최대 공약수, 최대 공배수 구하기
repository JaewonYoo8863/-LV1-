---
##LV1
## 문제 설명  
두 수를 입력받아 **최대공약수(GCD)**와 **최소공배수(LCM)**를 반환하는 함수 `solution`을 완성하세요.  
배열의 **첫 번째 요소**는 최대공약수, **두 번째 요소**는 최소공배수를 넣어 반환해야 합니다.  

예를 들어,  
- `solution(3, 12)` → `[3, 12]` (최대공약수: `3`, 최소공배수: `12`)  
- `solution(2, 5)` → `[1, 10]` (최대공약수: `1`, 최소공배수: `10`)  

---

## 제한 사항  
- `n`과 `m`은 **1 이상 1,000,000 이하의 자연수**입니다.  

---

## 코드  
```java
class Solution {
    public int[] solution(int n, int m) {
        int number = 1; 
        int min = (n < m) ? n : m; 
        for (int i = 1; i <= min; i++) {
            if (n % i == 0 && m % i == 0) {
                number = i;
            }
        }

        int number2 = (n * m) / number; // 최소공배수 공식 사용

        return new int[]{number, number2};
    }
}
코드 설명
이 코드는 두 수의 **최대공약수(GCD)**와 **최소공배수(LCM)**를 구하여 배열로 반환하는 solution 메서드를 구현한 것이다.
int number = 1;
최대공약수를 저장할 변수를 선언하고 초기값을 1로 설정한다.
int min = (n < m) ? n : m;
두 수 중 작은 값을 min에 저장하여 반복문의 범위를 줄인다.
for (int i = 1; i <= min; i++)
1부터 min까지 반복하면서 두 수를 모두 나눌 수 있는 가장 큰 수(최대공약수)를 찾는다.
if (n % i == 0 && m % i == 0) { number = i; }
n과 m이 i로 나누어 떨어지면, number를 i로 갱신한다.
이렇게 하면 for문이 끝날 때 number에는 최대공약수가 저장된다.
int number2 = (n * m) / number;

최소공배수 공식:
n*m / GCD
이를 이용해 최소공배수를 계산하고 number2에 저장한다.
return new int[]{number, number2};

최대공약수와 최소공배수를 배열로 반환한다.
