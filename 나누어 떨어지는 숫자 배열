# Lv1
## 문제 설명  
`array`의 각 원소 중 `divisor`로 나누어떨어지는 값을 오름차순으로 정렬한 배열을 반환하는 함수 `solution`을 작성함.  
- 만약 `divisor`로 나누어떨어지는 원소가 하나도 없다면 배열에 `-1`을 담아 반환함.  

---

### 제한 사항  
1. `arr`은 자연수를 담은 배열임.  
2. 배열 `arr`에서 서로 다른 두 원소의 값은 항상 다름 (`arr[i] ≠ arr[j]`).  
3. `divisor`는 자연수임.  
4. `array`는 길이가 1 이상인 배열임.  

---

## 코드
```java
import java.util.Arrays;

class Solution {
    public int[] solution(int[] arr, int divisor) {
        // divisor로 나누어떨어지는 값을 필터링하여 배열로 변환
        int[] answer = Arrays.stream(arr)
                             .filter(factor -> factor % divisor == 0)
                             .toArray();
                             
        // 나누어떨어지는 값이 없으면 -1을 담은 배열 반환
        if (answer.length == 0) answer = new int[] {-1};
        
        // 오름차순 정렬
        Arrays.sort(answer);
        
        return answer;
    }
}
```java
import java.util.ArrayList;
import java.util.Collections;

class Solution {
    public int[] solution(int[] arr, int divisor) {
        ArrayList<Integer> list = new ArrayList<>();
        
        // 배열의 요소를 divisor로 나누어 떨어지는지 확인
        for (int num : arr) {
            if (num % divisor == 0) {
                list.add(num);
            }
        }
        
        // 나누어 떨어지는 값이 없으면 -1 반환
        if (list.isEmpty()) {
            return new int[] {-1};
        }
        
        // 오름차순 정렬
        Collections.sort(list);
        
        // ArrayList를 배열로 변환하여 반환
        int[] answer = new int[list.size()];
        for (int i = 0; i < list.size(); i++) {
            answer[i] = list.get(i);
        }
        
        return answer;
    }
}

##코드 설명
1번: 
Arrays.stream(arr): 배열 arr를 스트림으로 변환.
.filter(factor -> factor % divisor == 0): divisor로 나누어떨어지는 값을 필터링.
.toArray(): 필터링된 값을 다시 배열로 변환.
if (answer.length == 0):
필터링 결과 배열의 길이가 0이면, 나누어떨어지는 값이 없음을 의미하므로 -1을 담은 배열 반환.
2번: 
Arrays.sort(answer): 결과 배열을 오름차순으로 정렬.
ArrayList<Integer> list = new ArrayList<>();: divisor로 나누어떨어지는 값을 저장할 리스트 생성.
for (int num : arr): 배열의 각 요소를 순회하며, 나누어떨어지는 값인지 확인.
list.add(num);: 나누어떨어지는 값인 경우 리스트에 추가.
if (list.isEmpty()):
리스트가 비어 있다면 나누어떨어지는 값이 없음을 의미하므로 -1을 담은 배열 반환.
Collections.sort(list);: 리스트를 오름차순으로 정렬.
리스트를 배열로 변환: 리스트의 각 요소를 순회하며 배열에 복사
##주요 문법
Arrays.stream(arr): 배열을 스트림으로 변환해 데이터 처리 가능.
.filter(condition): 조건에 맞는 원소만 걸러냄.
.toArray(): 스트림을 다시 배열로 변환.
Arrays.sort(array): 배열을 오름차순으로 정렬.
