# 문제 설명  
새로 생긴 놀이기구는 인기가 매우 많아 줄이 끊이질 않습니다. 이 놀이기구의 원래 이용료는 `price`원 인데, 놀이기구를 `N`번째 이용한다면 원래 이용료의 `N`배를 받기로 하였습니다. 즉, 처음 이용료가 100이었다면 2번째에는 200, 3번째에는 300으로 요금이 인상됩니다.  
놀이기구를 `count`번 타게 되면 현재 자신이 가지고 있는 금액에서 얼마가 모자라는지를 return 하도록 `solution` 함수를 완성하세요.  
단, 금액이 부족하지 않으면 0을 return 하세요.

### 제한 사항  
- `price`: 1 ≤ `price` ≤ 2,500, `price`는 자연수  
- `money`: 1 ≤ `money` ≤ 1,000,000,000, `money`는 자연수  
- `count`: 1 ≤ `count` ≤ 2,500, `count`는 자연수

---

## 코드
```java
class Solution {
    public long solution(int price, int money, int count) {
        long answer = -1;
        long resultMoney = 0;
        
        for (int i = 1; i <= count; i++) {
            resultMoney += price * i;
        }
        
        answer = resultMoney - money;
        return answer > 0 ? answer : 0;
    }
}
## 코드 설명
놀이기구를 count번 이용할 때의 총 금액을 계산하여 resultMoney에 저장.
resultMoney에서 money를 빼서 모자라는 금액을 계산.
만약 모자라는 금액이 0 이하라면 0을 반환하고, 모자라면 그 금액을 반환.
